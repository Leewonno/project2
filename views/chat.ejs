<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/chat.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />

    <title>채팅방</title>
    <style></style>
  </head>
  <body>
    <%- contentFor('chat-body') %>
    <div id="msg">
      <div class="talk_menu_bar" hidden>
        <div class="share_button">
          <button type="button" onclick="close_menu()" class="closeMenu">
            <span class="material-symbols-outlined">close</span>
          </button>
          <button onclick="share_url()" class="share">
            <span class="material-symbols-outlined"> ios_share </span>
          </button>
        </div>
        <br />
        <div class="menu_main">
          <div class="talk_profile"><img src="" alt="" class="profile_img" /></div>
          <div class="room_name"></div>
          <button class="talk_out" onclick="leaveChat()">
            <span class="material-symbols-outlined"> logout </span>
            <p>나가기</p>
          </button>
        </div>
      </div>
      <div id="notice"></div>
    </div>
    <form id="chat">
      <input type="text" id="message" placeholder="메세지 입력" />
      <button class="chat_send_message">전송</button>
    </form>

    <script>
      function open_menu() {
        const menu_bar = document.querySelector('.talk_menu_bar');
        menu_bar.style.right = '0';
        menu_bar.removeAttribute('hidden');
      }

      function close_menu() {
        const menu_bar = document.querySelector('.talk_menu_bar');
        menu_bar.style.right = '-100%';
        menu_bar.setAttribute('hidden', 'true');
      }
    </script>

    <script>
      const socket = io();
      const roomForm = document.querySelector('#room');
      const chatForm = document.querySelector('#chat');
      const msg = document.querySelector('#msg');
      const share = document.querySelector('#share_button');
      const talkName = document.querySelector('#talk_name');
      const roomname = document.querySelector('.room_name');
      let myName, roomName, member, cover_img, current;
      // msg.scrollTop = msg.scrollHeight;
      // const roomName = roomForm.querySelector('#roomName');
      axios({
        method: 'POST',
        url: '/chat',
      }).then((res) => {
        myName = res.data.userid;
        roomName = res.data.roomName;
        member = res.data.member;
        cover_img = res.data.cover_img;
        console.log('mN', myName);
        console.log('rM', roomName);
        console.log('mM', member);
        console.log('ci', cover_img);
        document.querySelector('.talk_name').innerHTML = `${roomName}<div class="member">${member}</div>`;
        // let cg = document.createElement('div');
        roomname.innerHTML = `<p>${roomName}</p>`;
        // talkName.appendChild(cg);
        document.querySelector('.profile_img').src = `${cover_img}`;
        console.log('ddd', document.querySelector('.profile_img').src);
      });
      socket.emit('create');
      window.scrollTo(0, msg.scrollHeight);

      //메세지 띄우기
      socket.on('newMessage', (message, userid) => {
        console.log(message, userid);
        const div = document.createElement('div');
        const p1 = document.createElement('p');
        const p = document.createElement('p');
        let p2;
        console.log('test', userid);

        if (message) {
          if (myName == userid) {
            //내가입력한 텍스트
            div.classList.add('hello');
            p.textContent = `${message}`;
          } else {
            console.log('my', myName);
            console.log('user', userid);
            div.classList.add('hellow');

            p1.classList.add('hellowId');

            p1.innerHTML = `${userid}`;
            p.innerHTML = `${message}`;
          }

          msg.appendChild(p1);
          div.appendChild(p);
          msg.appendChild(div);
        }
        current = document.querySelectorAll('p');
        current[current.length - 1].scrollIntoView(true);
      });

      //입장 메세지 이벤트
      socket.on('notice', (message, userid) => {
        const div = document.createElement('div');
        const p = document.createElement('p');
        p.id = 'noticeId';
        // console.log('my', myName);
        p.textContent = message;
        div.appendChild(p);
        msg.appendChild(div);
      });

      ///폼 이벤트
      chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const message = document.querySelector('#message');
        console.log('cl', myName);
        const msg = {
          userid: myName,
          message: message.value,
        };
        socket.emit('sendMessage', msg);
        message.value = '';
        current = document.querySelectorAll('p');
        console.log(current[0]);

        current[current.length - 1].scrollIntoView(true);
      });

      const leaveChat = () => {
        socket.emit('deleteInfo');
        window.close();
      };

      const share_url = () => {
        var url = '';
        var textarea = document.createElement('textarea');
        document.body.appendChild(textarea);
        url = window.document.location.href;
        textarea.value = url;
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);
      };
    </script>
  </body>
</html>
